- name: EDA Controller | Retrieve rulebooks for given project
  ansible.builtin.uri:
    url: "{{ eda_controller_url }}/api/eda/v1/rulebooks/?project_id={{ eda_project_id }}"
    force_basic_auth: true
    url_username: "{{ eda_controller_user }}"
    url_password: "{{ eda_controller_password }}"
    method: GET
    validate_certs: false
    status_code:
      - 200
      - 201
  register: _rulebooks

- name: EDA Controller | Build rulebook id/rulebook association for activations
  ansible.builtin.set_fact:
    rulebook_list: "{{ rulebook_list | default([]) + [{'name': item.name, 'id': _rulebooks | community.general.json_query(rulebook_query) | join('') | int}] }}"
  vars:
    rulebook_query: "json.results[?name=='{{ item.rulebook }}'].id"
  loop: "{{ eda_activations }}"

- name: EDA Controller | Create extra vars for activations if present
  ansible.builtin.uri:
    url: "{{ eda_controller_url }}/api/eda/v1/extra-vars/"
    force_basic_auth: true
    url_username: "{{ eda_controller_user }}"
    url_password: "{{ eda_controller_password }}"
    method: POST
    body: {"extra_var": "{{ item.extra_vars | default(null, true) | string }}"}
    body_format: json
    validate_certs: false
    status_code:
      - 200
      - 201
  loop: "{{ eda_activations }}"
  register: _extra_vars
  when: item.extra_vars is defined and item.extra_vars != ""

- name: EDA Controller | Attach extra vars to activations
  ansible.builtin.set_fact:
    rulebook_list: >-
      {{
        rulebook_list | map('combine', { 'var_id': results_item.json.id })
        if results_item.item.name == item.name else item
      }}
  loop: "{{ rulebook_list }}"
  vars:
    results_item: "{{ _extra_vars.results | selectattr('item.name', 'equalto', item.name) | first }}"
  when: results_item.json.id is defined

- name: EDA Controller | Create activations for given project
  ansible.builtin.uri:
    url: "{{ eda_controller_url }}/api/eda/v1/activations/"
    force_basic_auth: true
    url_username: "{{ eda_controller_user }}"
    url_password: "{{ eda_controller_password }}"
    method: POST
    body: {"restart_policy":"{{ restart_policy | default('always', true) }}","is_enabled":"{{ enabled | default(true, true) | bool }}","name":"{{ item.name }}","project_id":"{{ eda_project_id | int }}","decision_environment_id":"{{ eda_denv_id | int }}","rulebook_id":"{{ item.id | int }}", "extra_var_id": "{{ item.var_id }}"}
    body_format: json
    validate_certs: false
    status_code:
      - 200
      - 201
  loop: "{{ rulebook_list }}"
  when: item.var_id is defined

- name: EDA Controller | Create activations for given project
  ansible.builtin.uri:
    url: "{{ eda_controller_url }}/api/eda/v1/activations/"
    force_basic_auth: true
    url_username: "{{ eda_controller_user }}"
    url_password: "{{ eda_controller_password }}"
    method: POST
    body: {"restart_policy":"{{ restart_policy | default('always', true) }}","is_enabled":"{{ enabled | default(true, true) | bool }}","name":"{{ item.name }}","project_id":"{{ eda_project_id | int }}","decision_environment_id":"{{ eda_denv_id | int }}","rulebook_id":"{{ item.id | int }}"}
    body_format: json
    validate_certs: false
    status_code:
      - 200
      - 201
  loop: "{{ rulebook_list }}"
  when: item.var_id is not defined
